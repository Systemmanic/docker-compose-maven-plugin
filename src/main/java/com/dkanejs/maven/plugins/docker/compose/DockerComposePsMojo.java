package com.dkanejs.maven.plugins.docker.compose;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Mojo;

@SuppressWarnings("unused")
@Mojo(name = "ps", threadSafe = true)
public class DockerComposePsMojo extends AbstractDockerComposeMojo {

	public static final Pattern PATTERN_MAPPING = Pattern.compile("(?:([0-9a-f.:]+)->([0-9]+)/(tcp|udp))+");

	public void execute() throws MojoExecutionException {

		if (skip) {
			getLog().info("Skipping execution");
			return;
		}

		List<String> args = new ArrayList<>();
		args.add(Command.PS.getValue());

		List<String> output = new ArrayList<>();
		super.execute(args, output);

		if (output.size() <= 2) {
			return;
		}

		Properties properties = new Properties();

		output
			.stream()
			.forEach(line -> {
				Matcher matcher = PATTERN_MAPPING.matcher(line);
				while (matcher.find()) {
					properties.setProperty(String
						.format("%s_%s_%s",
							line.split(" ")[0],
							matcher.group(3),
							matcher.group(2))
						.toUpperCase()
						.replace("-", "_"), matcher.group(1));
				}
			});

		try {
			File file = new File(this.mappingFile);
			OutputStream out = new FileOutputStream( file );
			properties.store(out, "Generated by docker-compose-maven-plugin (mvn docker-compose:ps)");
			getLog().info(String.format("Wrote port mappings to %s", this.mappingFile));
		} catch (IOException e) {
			throw new MojoExecutionException(e.getMessage());
		}
	}
}
